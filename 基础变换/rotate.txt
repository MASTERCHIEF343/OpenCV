#include <iostream>
#include <opencv2/core.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

using namespace std;
using namespace cv;

// 宏定义
#define DEGREE2RADIAN(x) (x*CV_PI/180)//角度转弧度
#define RADIAN2DEGREE(x) (x*180/CV_PI)//弧度转角度
#define  SHIFT  10
#define  DESCALE(x,n)  (((x)+(1 << ((n)-1))) >> (n))
/*	center:原图像的旋转中心
	dstSize:旋转后图像的大小
	theta:旋转角度，单位弧度，顺时针为正
	scale:缩放，scale>1表示放大  <1表示缩小
*/
void Rotate_Nearest(const Mat &srcImage, Mat &dstImage, Point center, Size dstSize, double theta, double scale)
{
    CV_Assert(srcImage.depth() == CV_8U);
    dstImage.create(dstSize, srcImage.type());

    int x0 = center.x;
    int y0 = center.y;
    theta = DEGREE2RADIAN(theta);

    // dx,dy就是dst与src图像中心的距离
    int dx = dstImage.cols/2 - srcImage.cols/2;
    int dy = dstImage.rows/2 - srcImage.rows/2;
    int numberOfChannels = srcImage.channels();

    int widthOfDst = dstImage.cols;
    int heightOfDst = dstImage.rows;

    for (int y = 0; y <= heightOfDst - 1; ++y)
    {
        for (int x = 0; x <= widthOfDst - 1; ++x)
        {
            float srcX = ((x - x0 - dx)*cos(theta) + (y - y0 - dy)*sin(theta))/scale + x0;
            float srcY = ((x0 + dx - x)*sin(theta) + (y - y0 - dy)*cos(theta))/scale + y0;

            // get the nearest coordinate of src
            int x1 = (int)srcX;
            int y1 = (int)srcY;
            if (numberOfChannels == 1)
            {
                if ((x1 >= 0 && x1 <= srcImage.cols - 1) && (y1 >= 0 && y1 <= srcImage.rows - 1))
                {
                    dstImage.at<uchar>(y, x) = srcImage.at<uchar>(y1, x1);
                }
                else
                {
                    // 越界赋值0
                    dstImage.at<uchar>(y, x) = 0;
                }
            }
            else
            {
                if ((x1 >= 0 && x1 <= srcImage.cols - 1) && (y1 >= 0 && y1 <= srcImage.rows - 1))
                {
                    dstImage.at<cv::Vec3b>(y, x) = srcImage.at<cv::Vec3b>(y1, x1);
                }
                else
                {
                    dstImage.at<cv::Vec3b>(y, x) = cv::Vec3b(0,0,0);
                }

            }
        }
    }
}

int main() {
    Mat src = imread("/Users/masterchief/Opencv_Test/left.png");
    cv::imshow("src", src);
    if(!src.data){
        return -1;
    }
    Mat dstImage;
    Rotate_Nearest(src, dstImage, Point(src.cols / 2, src.rows / 2), Size(1000, 1000), 30.0, 2);

    imshow("imageReduction1", dstImage);



    cv::waitKey(0);
    return 0;
}